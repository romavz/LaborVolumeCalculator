// <auto-generated />
using System;
using LaborVolumeCalculator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaborVolumeCalculator.Migrations
{
    [DbContext(typeof(LVCContext))]
    [Migration("20200804073050_remove_NiokrCategory")]
    partial class remove_NiokrCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LaborVolumeCalculator.Models.DeviceComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("DeviceCompositionID", "DeviceCountRangeID")
                        .IsUnique();

                    b.ToTable("DeviceComplexityRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.DeviceComposition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceComposition");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.DeviceCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceCountRange");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbEntityCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DbEntityCountRanges");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Labor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxVolume")
                        .HasColumnType("real");

                    b.Property<float>("MinVolume")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Labor","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Labor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Niokr", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NiokrCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Niokr","Dictionary");

                    b.HasDiscriminator<string>("NiokrCategory").HasValue("Niokr");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NiokrStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NiokrStage","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NiokrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.PlatePointsCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PlatePointsCountRanges");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevEnv", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoftwareDevEnvs");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoftwareDevLaborGroup","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.NirInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirInnovationProperty");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.NirInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NirInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("NirScaleID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("NirInnovationPropertyID");

                    b.HasIndex("NirScaleID", "NirInnovationPropertyID")
                        .IsUnique();

                    b.ToTable("NirInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.NirScale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirScale");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.OkrInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OkrInnovationProperty");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.OkrInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("OkrInnovationPropertyID", "DeviceCompositionID")
                        .IsUnique();

                    b.ToTable("OkrInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.LaborVolumeReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("NiokrID")
                        .HasColumnType("int");

                    b.Property<int>("NiokrStageID")
                        .HasColumnType("int");

                    b.Property<float>("TotalVolume")
                        .HasColumnType("real");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("NiokrID");

                    b.HasIndex("NiokrStageID");

                    b.ToTable("LaborVolumeRegs");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("DbEntityCountRangeId")
                        .HasColumnType("int");

                    b.HasIndex("DbEntityCountRangeId");

                    b.HasDiscriminator().HasValue("DbDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.HardwareDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("PlatePointsCountRangeID")
                        .HasColumnType("int");

                    b.HasIndex("PlatePointsCountRangeID");

                    b.HasDiscriminator().HasValue("HardwareDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("NirLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OntdLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("OntdLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("SoftwareDevEnvID")
                        .HasColumnType("int");

                    b.HasIndex("SoftwareDevEnvID");

                    b.HasDiscriminator().HasValue("SoftwareDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Niokr");

                    b.Property<int>("NirInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("NirInnovationRateID")
                        .HasColumnType("int");

                    b.Property<int>("NirScaleID")
                        .HasColumnType("int");

                    b.HasIndex("NirInnovationPropertyID");

                    b.HasIndex("NirInnovationRateID");

                    b.HasIndex("NirScaleID");

                    b.HasDiscriminator().HasValue("НИР");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Niokr");

                    b.Property<int>("DeviceComplexityRateID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationRateID")
                        .HasColumnType("int");

                    b.HasIndex("DeviceComplexityRateID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("OkrInnovationPropertyID");

                    b.HasIndex("OkrInnovationRateID");

                    b.HasDiscriminator().HasValue("ОКР");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStage", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.NiokrStage");

                    b.HasDiscriminator().HasValue("NirStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrStage", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.NiokrStage");

                    b.HasDiscriminator().HasValue("OkrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.HasDiscriminator().HasValue("NirSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.DeviceComplexityRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.NirInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.NirInnovationProperty", "NirInnovationProperty")
                        .WithMany()
                        .HasForeignKey("NirInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.NirScale", "NirScale")
                        .WithMany()
                        .HasForeignKey("NirScaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.OkrInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.LaborVolumeReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Labor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Niokr", "Niokr")
                        .WithMany()
                        .HasForeignKey("NiokrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NiokrStage", "NiokrStage")
                        .WithMany()
                        .HasForeignKey("NiokrStageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbDevLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DbEntityCountRange", "DbEntityCountRange")
                        .WithMany()
                        .HasForeignKey("DbEntityCountRangeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.HardwareDevLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.PlatePointsCountRange", "PlatePointsCountRange")
                        .WithMany()
                        .HasForeignKey("PlatePointsCountRangeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SoftwareDevEnv", "SoftwareDevEnv")
                        .WithMany()
                        .HasForeignKey("SoftwareDevEnvID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.NirInnovationProperty", "NirInnovationProperty")
                        .WithMany()
                        .HasForeignKey("NirInnovationPropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.NirInnovationRate", "NirInnovationRate")
                        .WithMany()
                        .HasForeignKey("NirInnovationRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.NirScale", "NirScale")
                        .WithMany()
                        .HasForeignKey("NirScaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.DeviceComplexityRate", "DeviceComplexityRate")
                        .WithMany()
                        .HasForeignKey("DeviceComplexityRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.OkrInnovationRate", "OkrInnovationRate")
                        .WithMany()
                        .HasForeignKey("OkrInnovationRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
