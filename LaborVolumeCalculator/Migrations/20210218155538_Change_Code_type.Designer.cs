// <auto-generated />
using System;
using LaborVolumeCalculator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaborVolumeCalculator.Migrations
{
    [DbContext(typeof(LVCContext))]
    [Migration("20210218155538_Change_Code_type")]
    partial class Change_Code_type
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ArchitectureComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ComponentsInteractionArchitectureID")
                        .HasColumnType("int");

                    b.Property<int>("ComponentsMakroArchitectureID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ComponentsMakroArchitectureID");

                    b.HasIndex("ComponentsInteractionArchitectureID", "ComponentsMakroArchitectureID")
                        .IsUnique();

                    b.ToTable("ArchitectureComplexityRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsInteractionArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsInteractionArchitecture", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsMakroArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsMakroArchitecture", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsMicroArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsMicroArchitecture", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.CorrectionRatesBundle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArchitectureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("ArchitectureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InfrastructureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("InfrastructureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SolutionInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("SolutionInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("StandardModulesUsingRateID")
                        .HasColumnType("int");

                    b.Property<double>("StandardModulesUsingRateValue")
                        .HasColumnType("float");

                    b.Property<int>("TestsDevelopmentRateID")
                        .HasColumnType("int");

                    b.Property<double>("TestsDevelopmentRateValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ArchitectureComplexityRateID");

                    b.HasIndex("InfrastructureComplexityRateID");

                    b.HasIndex("SolutionInnovationRateID");

                    b.HasIndex("StandardModulesUsingRateID");

                    b.HasIndex("TestsDevelopmentRateID");

                    b.ToTable("CorrectionRatesBundle", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LaborCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LaborCategoryID", "Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("DevelopmentLabor", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLaborCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("LaborCategory", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("DeviceCompositionID", "DeviceCountRangeID")
                        .IsUnique();

                    b.ToTable("DeviceComplexityRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceComposition", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceCountRange", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.InfrastructureComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("InfrastructureComplexityRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Labor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Labor", "Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Labor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.LaborVolumeRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.Property<int>("RangeFeatureID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RangeFeatureID");

                    b.HasIndex("LaborID", "RangeFeatureID")
                        .IsUnique();

                    b.ToTable("LaborVolumeRange", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("AnalogDurationMonthes")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<double>("IntensiveRateValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Nir", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirInnovationProperty", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NirInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("NirScaleID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("NirInnovationPropertyID");

                    b.HasIndex("NirScaleID", "NirInnovationPropertyID")
                        .IsUnique();

                    b.ToTable("NirInnovationRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirScale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirScale", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStageDefaultLabor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID");

                    b.ToTable("NirStageDefaultLabors", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceComplexityRateID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationRateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DeviceComplexityRateID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("OkrInnovationPropertyID");

                    b.HasIndex("OkrInnovationRateID");

                    b.ToTable("Okr", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OkrInnovationProperty", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("OkrInnovationPropertyID", "DeviceCompositionID")
                        .IsUnique();

                    b.ToTable("OkrInnovationRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.RangeFeature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RangeFeatureCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RangeFeatureCategoryID");

                    b.ToTable("RangeFeature", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.RangeFeatureCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RangeFeatureCategory", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoftwareDevLaborGroup", "Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SolutionInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("SolutionInnovationRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Stage", "Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.StandardModulesUsingRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("StandardModulesUsingRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsCoverageLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TestsCoverageLevel", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsDevelopmentRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ComponentsMicroArchitectureID")
                        .HasColumnType("int");

                    b.Property<int>("TestsCoverageLevelID")
                        .HasColumnType("int");

                    b.Property<int>("TestsScaleID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("TestsCoverageLevelID");

                    b.HasIndex("TestsScaleID");

                    b.HasIndex("ComponentsMicroArchitectureID", "TestsCoverageLevelID", "TestsScaleID")
                        .IsUnique();

                    b.ToTable("TestsDevelopmentRate", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsScale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TestsScale", "Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirDevelopmentLaborVolume", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborVolumeRangeID")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborVolumeRangeID");

                    b.HasIndex("SoftwareDevLaborGroupID", "LaborVolumeRangeID")
                        .IsUnique();

                    b.ToTable("NirDevelopmentLaborVolume", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NirID")
                        .HasColumnType("int");

                    b.Property<int>("NirInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("NirID");

                    b.HasIndex("NirInnovationRateID");

                    b.ToTable("NirStage", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageLaborVolume", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID", "LaborID")
                        .IsUnique();

                    b.ToTable("NirStageLaborVolume", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageOntdLaborVolume", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID", "LaborID")
                        .IsUnique();

                    b.ToTable("NirStageOntdLaborVolume", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageSoftwareDevLaborGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArchitectureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("ArchitectureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int?>("CorrectionRatesBundleID")
                        .HasColumnType("int");

                    b.Property<int>("InfrastructureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("InfrastructureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<int>("SolutionInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("SolutionInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("StandardModulesUsingRateID")
                        .HasColumnType("int");

                    b.Property<double>("StandardModulesUsingRateValue")
                        .HasColumnType("float");

                    b.Property<int>("TestsDevelopmentRateID")
                        .HasColumnType("int");

                    b.Property<double>("TestsDevelopmentRateValue")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CorrectionRatesBundleID");

                    b.HasIndex("SoftwareDevLaborGroupID");

                    b.HasIndex("StageID", "SoftwareDevLaborGroupID")
                        .IsUnique();

                    b.ToTable("NirStageSoftwareDevLaborGroup", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OkrID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StageID");

                    b.HasIndex("OkrID", "StageID")
                        .IsUnique();

                    b.ToTable("OkrStage", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageLaborVolume", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID", "LaborID")
                        .IsUnique();

                    b.ToTable("OkrStageLaborVolume", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageSoftwareDevLaborGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArchitectureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("ArchitectureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int?>("CorrectionRatesBundleID")
                        .HasColumnType("int");

                    b.Property<int>("InfrastructureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("InfrastructureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<int>("SolutionInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("SolutionInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("StandardModulesUsingRateID")
                        .HasColumnType("int");

                    b.Property<double>("StandardModulesUsingRateValue")
                        .HasColumnType("float");

                    b.Property<int>("TestsDevelopmentRateID")
                        .HasColumnType("int");

                    b.Property<double>("TestsDevelopmentRateValue")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CorrectionRatesBundleID");

                    b.HasIndex("SoftwareDevLaborGroupID");

                    b.HasIndex("StageID", "SoftwareDevLaborGroupID")
                        .IsUnique();

                    b.ToTable("OkrStageSoftwareDevLaborGroup", "Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("NirLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OntdLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("OntdLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.HasDiscriminator().HasValue("NirSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.StageForNir", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Stage");

                    b.HasDiscriminator().HasValue("StageForNir");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.StageForOkr", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Stage");

                    b.HasDiscriminator().HasValue("StageForOkr");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ArchitectureComplexityRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsInteractionArchitecture", "ComponentsInteractionArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsInteractionArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsMakroArchitecture", "ComponentsMakroArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsMakroArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponentsInteractionArchitecture");

                    b.Navigation("ComponentsMakroArchitecture");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.CorrectionRatesBundle", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ArchitectureComplexityRate", "ArchitectureComplexityRate")
                        .WithMany()
                        .HasForeignKey("ArchitectureComplexityRateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.InfrastructureComplexityRate", "InfrastructureComplexityRate")
                        .WithMany()
                        .HasForeignKey("InfrastructureComplexityRateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SolutionInnovationRate", "SolutionInnovationRate")
                        .WithMany()
                        .HasForeignKey("SolutionInnovationRateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.StandardModulesUsingRate", "StandardModulesUsingRate")
                        .WithMany()
                        .HasForeignKey("StandardModulesUsingRateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.TestsDevelopmentRate", "TestsDevelopmentRate")
                        .WithMany()
                        .HasForeignKey("TestsDevelopmentRateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArchitectureComplexityRate");

                    b.Navigation("InfrastructureComplexityRate");

                    b.Navigation("SolutionInnovationRate");

                    b.Navigation("StandardModulesUsingRate");

                    b.Navigation("TestsDevelopmentRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DevelopmentLaborCategory", "LaborCategory")
                        .WithMany("Labors")
                        .HasForeignKey("LaborCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborCategory");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceComposition");

                    b.Navigation("DeviceCountRange");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.LaborVolumeRange", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.RangeFeature", "RangeFeature")
                        .WithMany()
                        .HasForeignKey("RangeFeatureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("RangeFeature");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirInnovationProperty", "NirInnovationProperty")
                        .WithMany()
                        .HasForeignKey("NirInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirScale", "NirScale")
                        .WithMany()
                        .HasForeignKey("NirScaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NirInnovationProperty");

                    b.Navigation("NirScale");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStageDefaultLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.StageForNir", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", "DeviceComplexityRate")
                        .WithMany()
                        .HasForeignKey("DeviceComplexityRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", "OkrInnovationRate")
                        .WithMany()
                        .HasForeignKey("OkrInnovationRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeviceComplexityRate");

                    b.Navigation("DeviceComposition");

                    b.Navigation("DeviceCountRange");

                    b.Navigation("OkrInnovationProperty");

                    b.Navigation("OkrInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceComposition");

                    b.Navigation("OkrInnovationProperty");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.RangeFeature", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.RangeFeatureCategory", "RangeFeatureCategory")
                        .WithMany("RangeFeatures")
                        .HasForeignKey("RangeFeatureCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RangeFeatureCategory");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsDevelopmentRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsMicroArchitecture", "ComponentsMicroArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsMicroArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.TestsCoverageLevel", "TestsCoverageLevel")
                        .WithMany()
                        .HasForeignKey("TestsCoverageLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.TestsScale", "TestsScale")
                        .WithMany()
                        .HasForeignKey("TestsScaleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponentsMicroArchitecture");

                    b.Navigation("TestsCoverageLevel");

                    b.Navigation("TestsScale");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirDevelopmentLaborVolume", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.LaborVolumeRange", "LaborVolumeRange")
                        .WithMany()
                        .HasForeignKey("LaborVolumeRangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.NirStageSoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany("LaborVolumes")
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborVolumeRange");

                    b.Navigation("SoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStage", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Nir", "Nir")
                        .WithMany("Stages")
                        .HasForeignKey("NirID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirInnovationRate", "NirInnovationRate")
                        .WithMany()
                        .HasForeignKey("NirInnovationRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nir");

                    b.Navigation("NirInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageLaborVolume", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.NirStage", "Stage")
                        .WithMany("LaborVolumes")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageOntdLaborVolume", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OntdLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.NirStage", "Stage")
                        .WithMany("OntdLaborVolumes")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageSoftwareDevLaborGroup", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.CorrectionRatesBundle", "CorrectionRatesBundle")
                        .WithMany()
                        .HasForeignKey("CorrectionRatesBundleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirSoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany()
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.NirStage", "Stage")
                        .WithMany("SoftwareDevLaborGroups")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectionRatesBundle");

                    b.Navigation("SoftwareDevLaborGroup");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStage", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Okr", "Okr")
                        .WithMany()
                        .HasForeignKey("OkrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.StageForOkr", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Okr");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageLaborVolume", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.OkrStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageSoftwareDevLaborGroup", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.CorrectionRatesBundle", "CorrectionRatesBundle")
                        .WithMany()
                        .HasForeignKey("CorrectionRatesBundleID");

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany()
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Registers.OkrStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectionRatesBundle");

                    b.Navigation("SoftwareDevLaborGroup");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.StageForOkr", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OkrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.StageForOkr", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OkrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLaborCategory", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.RangeFeatureCategory", b =>
                {
                    b.Navigation("RangeFeatures");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStage", b =>
                {
                    b.Navigation("LaborVolumes");

                    b.Navigation("OntdLaborVolumes");

                    b.Navigation("SoftwareDevLaborGroups");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageSoftwareDevLaborGroup", b =>
                {
                    b.Navigation("LaborVolumes");
                });
#pragma warning restore 612, 618
        }
    }
}
