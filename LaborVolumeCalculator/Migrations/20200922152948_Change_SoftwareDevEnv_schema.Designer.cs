// <auto-generated />
using System;
using LaborVolumeCalculator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaborVolumeCalculator.Migrations
{
    [DbContext(typeof(LVCContext))]
    [Migration("20200922152948_Change_SoftwareDevEnv_schema")]
    partial class Change_SoftwareDevEnv_schema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ArchitectureComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentsInteractionArchitectureID")
                        .HasColumnType("int");

                    b.Property<int>("ComponentsMakroArchitectureID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ComponentsMakroArchitectureID");

                    b.HasIndex("ComponentsInteractionArchitectureID", "ComponentsMakroArchitectureID")
                        .IsUnique();

                    b.ToTable("ArchitectureComplexityRate","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsInteractionArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsInteractionArchitecture","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsMakroArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsMakroArchitecture","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ComponentsMicroArchitecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ComponentsMicroArchitecture","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbDevLaborVolumeRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DbEntityCountRangeID")
                        .HasColumnType("int");

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DbEntityCountRangeID");

                    b.HasIndex("LaborID", "DbEntityCountRangeID")
                        .IsUnique();

                    b.ToTable("DbDevLaborVolumeRange","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbEntityCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DbEntityCountRanges");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaborCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LaborCategoryID");

                    b.ToTable("DevelopmentLabor","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DevelopmentLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLaborCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("LaborCategory","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("DeviceCompositionID", "DeviceCountRangeID")
                        .IsUnique();

                    b.ToTable("DeviceComplexityRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceComposition");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeviceCountRange");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.InfrastructureComplexityRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("InfrastructureComplexityRate","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Labor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxVolume")
                        .HasColumnType("real");

                    b.Property<float>("MinVolume")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Labor","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Labor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Niokr", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NiokrCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Niokr","Dictionary");

                    b.HasDiscriminator<string>("NiokrCategory").HasValue("Niokr");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NiokrStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NiokrStage","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NiokrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirInnovationProperty");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NirInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("NirScaleID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("NirInnovationPropertyID");

                    b.HasIndex("NirScaleID", "NirInnovationPropertyID")
                        .IsUnique();

                    b.ToTable("NirInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirScale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NirScale");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStageDefaultLabor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID");

                    b.ToTable("NirStageDefaultLabors","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OkrInnovationProperty");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(8, 4)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("OkrInnovationPropertyID", "DeviceCompositionID")
                        .IsUnique();

                    b.ToTable("OkrInnovationRate");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.PlatePointsCountRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PlatePointsCountRanges");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevEnv", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoftwareDevEnv","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SoftwareDevLaborGroup","Dictionary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborVolumeRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DevEnvID")
                        .HasColumnType("int");

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DevEnvID");

                    b.HasIndex("LaborID", "DevEnvID")
                        .IsUnique();

                    b.ToTable("SoftwareDevLaborVolumeRange","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SolutionInnovationRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("SolutionInnovationRate","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.StandardModulesUsingRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("StandardModulesUsingRate","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsCoverageLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TestsCoverageLevel","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsDevelopmentRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentsMicroArchitectureID")
                        .HasColumnType("int");

                    b.Property<int>("TestsCoverageLevelID")
                        .HasColumnType("int");

                    b.Property<int>("TestsScaleID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("TestsCoverageLevelID");

                    b.HasIndex("TestsScaleID");

                    b.HasIndex("ComponentsMicroArchitectureID", "TestsCoverageLevelID", "TestsScaleID")
                        .IsUnique();

                    b.ToTable("TestsDevelopmentRate","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsScale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TestsScale","Dictionary");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirLaborVolumeReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("NirID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID");

                    b.HasIndex("NirID", "StageID", "LaborID")
                        .IsUnique();

                    b.ToTable("NirLaborVolumeReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirSoftwareDevLaborGroupReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArchitectureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("ArchitectureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("InfrastructureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("InfrastructureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("NirID")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<int>("SolutionInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("SolutionInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("StandardModulesUsingRateID")
                        .HasColumnType("int");

                    b.Property<double>("StandardModulesUsingRateValue")
                        .HasColumnType("float");

                    b.Property<int>("TestsDevelopmentRateID")
                        .HasColumnType("int");

                    b.Property<double>("TestsDevelopmentRateValue")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("SoftwareDevLaborGroupID");

                    b.HasIndex("StageID");

                    b.HasIndex("NirID", "StageID", "SoftwareDevLaborGroupID")
                        .IsUnique();

                    b.ToTable("NirSoftwareDevLaborGroupReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirSoftwareDevLaborVolumeReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("NirID")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("SoftwareDevLaborGroupID");

                    b.HasIndex("StageID");

                    b.HasIndex("NirID", "StageID", "SoftwareDevLaborGroupID", "LaborID")
                        .IsUnique();

                    b.ToTable("NirSoftwareDevLaborVolumeReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NirID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StageID");

                    b.HasIndex("NirID", "StageID")
                        .IsUnique();

                    b.ToTable("NirStageReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrLaborVolumeReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaborID")
                        .HasColumnType("int");

                    b.Property<int>("OkrID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("LaborID");

                    b.HasIndex("StageID");

                    b.HasIndex("OkrID", "StageID", "LaborID")
                        .IsUnique();

                    b.ToTable("OkrLaborVolumeReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrSoftwareDevLaborGroupReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArchitectureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("ArchitectureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("InfrastructureComplexityRateID")
                        .HasColumnType("int");

                    b.Property<double>("InfrastructureComplexityRateValue")
                        .HasColumnType("float");

                    b.Property<int>("OkrID")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareDevLaborGroupID")
                        .HasColumnType("int");

                    b.Property<int>("SolutionInnovationRateID")
                        .HasColumnType("int");

                    b.Property<double>("SolutionInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("StandardModulesUsingRateID")
                        .HasColumnType("int");

                    b.Property<double>("StandardModulesUsingRateValue")
                        .HasColumnType("float");

                    b.Property<int>("TestsDevelopmentRateID")
                        .HasColumnType("int");

                    b.Property<double>("TestsDevelopmentRateValue")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("SoftwareDevLaborGroupID");

                    b.HasIndex("StageID");

                    b.HasIndex("OkrID", "StageID", "SoftwareDevLaborGroupID")
                        .IsUnique();

                    b.ToTable("OkrSoftwareDevLaborGroupReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OkrID")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StageID");

                    b.HasIndex("OkrID", "StageID")
                        .IsUnique();

                    b.ToTable("OkrStageReg","Registers");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor");

                    b.HasDiscriminator().HasValue("DbDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.HardwareDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor");

                    b.HasDiscriminator().HasValue("HardwareDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor");

                    b.HasDiscriminator().HasValue("SoftwareDevLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("NirLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OntdLabor", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Labor");

                    b.HasDiscriminator().HasValue("OntdLabor");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Niokr");

                    b.Property<int>("NirInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<double>("NirInnovationRateValue")
                        .HasColumnType("float");

                    b.Property<int>("NirScaleID")
                        .HasColumnType("int");

                    b.HasIndex("NirInnovationPropertyID");

                    b.HasIndex("NirScaleID");

                    b.HasDiscriminator().HasValue("НИР");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.Niokr");

                    b.Property<int>("DeviceComplexityRateID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCompositionID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceCountRangeID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationPropertyID")
                        .HasColumnType("int");

                    b.Property<int>("OkrInnovationRateID")
                        .HasColumnType("int");

                    b.HasIndex("DeviceComplexityRateID");

                    b.HasIndex("DeviceCompositionID");

                    b.HasIndex("DeviceCountRangeID");

                    b.HasIndex("OkrInnovationPropertyID");

                    b.HasIndex("OkrInnovationRateID");

                    b.HasDiscriminator().HasValue("ОКР");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStage", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.NiokrStage");

                    b.HasDiscriminator().HasValue("NirStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrStage", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.NiokrStage");

                    b.HasDiscriminator().HasValue("OkrStage");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.HasDiscriminator().HasValue("NirSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasBaseType("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup");

                    b.Property<int>("OkrStageID")
                        .HasColumnType("int");

                    b.HasIndex("OkrStageID");

                    b.HasDiscriminator().HasValue("OkrSoftwareDevLaborGroup");
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.ArchitectureComplexityRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsInteractionArchitecture", "ComponentsInteractionArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsInteractionArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsMakroArchitecture", "ComponentsMakroArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsMakroArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DbDevLaborVolumeRange", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DbEntityCountRange", "DbEntityCountRange")
                        .WithMany()
                        .HasForeignKey("DbEntityCountRangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DbDevLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DevelopmentLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DevelopmentLaborCategory", "LaborCategory")
                        .WithMany("Labors")
                        .HasForeignKey("LaborCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirInnovationProperty", "NirInnovationProperty")
                        .WithMany()
                        .HasForeignKey("NirInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirScale", "NirScale")
                        .WithMany()
                        .HasForeignKey("NirScaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.NirStageDefaultLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborVolumeRange", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SoftwareDevEnv", "DevEnv")
                        .WithMany()
                        .HasForeignKey("DevEnvID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.TestsDevelopmentRate", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.ComponentsMicroArchitecture", "ComponentsMicroArchitecture")
                        .WithMany()
                        .HasForeignKey("ComponentsMicroArchitectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.TestsCoverageLevel", "TestsCoverageLevel")
                        .WithMany()
                        .HasForeignKey("TestsCoverageLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.TestsScale", "TestsScale")
                        .WithMany()
                        .HasForeignKey("TestsScaleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirLaborVolumeReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Nir", "Nir")
                        .WithMany()
                        .HasForeignKey("NirID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirSoftwareDevLaborGroupReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Nir", "Nir")
                        .WithMany()
                        .HasForeignKey("NirID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirSoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany()
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirSoftwareDevLaborVolumeReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Nir", "Nir")
                        .WithMany()
                        .HasForeignKey("NirID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.SoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany()
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.NirStageReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Nir", "Nir")
                        .WithMany()
                        .HasForeignKey("NirID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrLaborVolumeReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrLabor", "Labor")
                        .WithMany()
                        .HasForeignKey("LaborID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Okr", "Okr")
                        .WithMany()
                        .HasForeignKey("OkrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrSoftwareDevLaborGroupReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Okr", "Okr")
                        .WithMany()
                        .HasForeignKey("OkrID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", "SoftwareDevLaborGroup")
                        .WithMany()
                        .HasForeignKey("SoftwareDevLaborGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Registers.OkrStageReg", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.Okr", "Okr")
                        .WithMany()
                        .HasForeignKey("OkrID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrLabor", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Nir", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirInnovationProperty", "NirInnovationProperty")
                        .WithMany()
                        .HasForeignKey("NirInnovationPropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.NirScale", "NirScale")
                        .WithMany()
                        .HasForeignKey("NirScaleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.Okr", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComplexityRate", "DeviceComplexityRate")
                        .WithMany()
                        .HasForeignKey("DeviceComplexityRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceComposition", "DeviceComposition")
                        .WithMany()
                        .HasForeignKey("DeviceCompositionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.DeviceCountRange", "DeviceCountRange")
                        .WithMany()
                        .HasForeignKey("DeviceCountRangeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationProperty", "OkrInnovationProperty")
                        .WithMany()
                        .HasForeignKey("OkrInnovationPropertyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrInnovationRate", "OkrInnovationRate")
                        .WithMany()
                        .HasForeignKey("OkrInnovationRateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaborVolumeCalculator.Models.Dictionary.OkrSoftwareDevLaborGroup", b =>
                {
                    b.HasOne("LaborVolumeCalculator.Models.Dictionary.OkrStage", "OkrStage")
                        .WithMany()
                        .HasForeignKey("OkrStageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
