@page
@model LaborVolumeCalculator.Pages.Nirs.EditLaborVolumesModel
@using LaborVolumeCalculator.Models.Dictionary

@{
    ViewData["Title"] = "Трудозатраты НИР";
}

<div>
    <h4>@Html.DisplayFor(model => model.Nir.Name)</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirInnovationProperty)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nir.NirInnovationProperty.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirScale)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nir.NirScale.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirInnovationRate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nir.NirInnovationRate.ID)
        </dd>
        <dt class="col-sm-2">
            Трудозатраты по НИР (ч*м)
        </dt>
        <dd id="nir-labor-volumes-total" class="col-sm-10">
            0.0
        </dd>
    </dl>
    <hr/>
    <p>
        <a asp-page="./Index">Вернуться к списку</a>
    </p>
</div>

<div class="container-lg px-0" id ="NiokrStages">
    @foreach (var nirStage in Model.NirStagesVM)
    {
        <div class="card d-flex mb-3">
            
            <div class="card-header d-flex justify-content-between" type="button" data-toggle="collapse" data-target="#collapseExample_@nirStage.ID.ToString()" aria-expanded="false" aria-controls="collapseExample_@nirStage.ID.ToString()">
                <div>@nirStage.Name </div>
                <div class="d-flex">
                    <div class="px-2"> Сумма трудозатрат: </div>
                    <div class="px-2" id="stage-labor-volumes-total-@nirStage.ID.ToString()">0.0</div>
                </div>
            </div>
            
            <div>
                <div class="pb-1 bg-secondary text-white"></div>
                <div class="collapse" id="collapseExample_@nirStage.ID.ToString()">
                    <div class="card-body px-2 py-0">
                        <nav class="nav py-1">
                            <form class="form-inline">
                                <button type="button" class="btn btn-link btn-sm d-inline align-middle" data-toggle="modal" data-target="#staticBackdropLabel-@nirStage.ID">
                                    Добавить трудозатраты
                                </button>
                            </form>
                        </nav>
                        <div id="nirStageData_@nirStage.ID">
                            @{ 
                                await Html.RenderPartialAsync(
                                    "../LaborVolumeRegs/_RegistredVolumesTable",
                                    nirStage
                                    );
                            }
                        </div>
                    </div>
                </div>
            </div>

            <table class="table" hidden>
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Labor.Code)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Labor)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Volume)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].TotalVolume)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.RegistredLabors)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Date)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Labor.Code)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Labor.Name)
                            </td>
                            <td>
                                <div data-id="@item.ID">Удалить</div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div> <!-- card-->
    }
</div>

<!-- Modals -->
@foreach (var nirStage in Model.NirStagesVM)
{
    <div class="modal fade" id="staticBackdropLabel-@nirStage.ID" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Работы НИР</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body container" id="laborSelectionList-@nirStage.ID">
                    @foreach (var labor in nirStage.AvailableLabors)
                    {
                        <div class="row justify-content-start" data-laborID="@labor.ID">
                            <div class="col-1 pr-0">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="labor-@nirStage.ID-@labor.ID" />
                                    <label class="custom-control-label" for="labor-@nirStage.ID-@labor.ID" name ="labor-Code">@labor.Code</label>
                                </div>
                            </div>
                            <label class="col-9 pl-0" for="labor-@nirStage.ID-@labor.ID" name="labor-Name">@labor.Name</label>
                            <div class="col-1 px-0" name="labor-MinVolume">
                                @labor.MinVolume
                            </div>
                            <div class="col-1 px-0" name ="labor-MaxVolume">
                                @labor.MaxVolume
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                    <button type="button" class="btn btn-primary nirStageModalBtnOK" data-nirStageID="@nirStage.ID">ОК</button>
                </div>
            </div>
        </div>
    </div>
}

@section scripts{
    <script>
        class Labor {
            ID = 0;
            Code = "";
            Name = "";
            MinVolume = 0.0;
            MaxVolume = 0.0;
            Volume = 0.0;

            constructor(id = 0, code = "", name = "", minVolume = 0.0, maxVolume = 0.0) {
                this.ID = id;
                this.Code = code;
                this.Name = name;
                this.MinVolume = minVolume;
                this.MaxVolume = maxVolume;
            }

        }

        class Helper {
            constructor() { }

            createLabor(row) {
                return new Labor(
                    parseInt(row.attr('data-laborID')),
                    row.find("[name='labor-Code']").first().text().trim(),
                    row.find("[name='labor-Name']").first().text().trim(),
                    parseFloat(row.find("[name='labor-MinVolume']").first().text().trim().replace(",", ".")),
                    parseFloat(row.find("[name='labor-MaxVolume']").first().text().trim().replace(",", "."))
                );
            }

            forEachCheckedRow(selectList, func) {
                let checkedItems = selectList.find("input:checked");
                selectList.has(checkedItems).each(func);
            }

            addLaborsToNirStageTable(laborsArray) {

            };

            recalcNirStageTotalLaborsVolume(nirStageID) {

            }

            recalcNirTotalLaborsVolume() {

            }
        }

        $(document).ready(function () {
            let helper = new Helper();

            $('.nirStageModalBtnOK').on('click', function (event) {
                let okButton = $(event.target);
                let nirStageID = okButton.attr('data-nirStageID');
                let selectList = $("#laborSelectionList-" + nirStageID + " .row");
                let selectedLabors = [];
                helper.forEachCheckedRow(selectList, function (index, row) {
                    selectedLabors.push(helper.createLabor($(row)));
                    $(row).attr("hidden", true);
                    $(row).find("input:checked").attr("checked", false);
                });
                // добавить в таблицу этапа отмеченные работы (и желательно отсортировать по коду)
                // пересчитать итоги по таблице работ этапа НИР
                // пересчитать итоги по всей НИР
            });
        });
    </script>
}