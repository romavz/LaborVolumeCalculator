@page
@model LaborVolumeCalculator.Pages.Nirs.EditLaborVolumesModel
@using LaborVolumeCalculator.Models.Dictionary
@using System.Globalization

@{
    ViewData["Title"] = "Трудозатраты НИР";
}

<div>
    <h4>@Html.DisplayFor(model => model.Nir.Name)</h4>
    <hr />
    <input type="hidden" asp-for="Nir.ID" />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirInnovationProperty)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nir.NirInnovationProperty.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirScale)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nir.NirScale.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nir.NirInnovationRate)
        </dt>
        <dd class="col-sm-10" id="nirInnovationRateValue">
            @Model.Nir.NirInnovationRate.Value.ToString("0.0####", CultureInfo.InvariantCulture)
        </dd>
        <dt class="col-sm-2">
            Трудозатраты по НИР (ч*м)
        </dt>
        <dd id="nir-labor-volumes-total" class="col-sm-10">
            0.0
        </dd>
    </dl>
    <hr/>
    <p>
        <a asp-page="./Index">Вернуться к списку</a>
    </p>
</div>

<div class="container-lg px-0" id="NiokrStages">
    <table hidden id="nirStageTableRowHolder">
        <tr data-laborID="0">
            <th scope="row" name="laborCode"></th>
            <td name="laborName"> </td>
            <td name="laborMinVolume"> </td>
            <td name="laborMaxVolume"> </td>
            <td>
                <input name="Volume" class="form-control" value="0.0" />
            </td>
            <td name="totalVolume"> </td>
            <td><button type="button" class="btn btn-link btn-sm d-inline align-middle removeLaborButton" data-laborID="0" data-nirStageID="0">Удалить</button></td>
        </tr>
    </table>

    @foreach (var nirStage in Model.NirStagesVM)
    {
        <div class="card d-flex mb-3" id="nirStageCard-@nirStage.ID" name="nirStageCard" data-nirStageID="@nirStage.ID">

            <div class="card-header d-flex justify-content-between" type="button" data-toggle="collapse" data-target="#collapseExample_@nirStage.ID.ToString()" aria-expanded="false" aria-controls="collapseExample_@nirStage.ID.ToString()">
                <div>@nirStage.Name </div>
                <div class="d-flex">
                    <div class="px-2">Сумма трудозатрат: </div>
                    <div class="px-2" id="nirStageLaborsVolumeTotal-@nirStage.ID">0.0</div>
                </div>
            </div>

            <div>
                <div class="pb-1 bg-secondary text-white"></div>
                <div class="collapse" id="collapseExample_@nirStage.ID">
                    <div class="card-body px-2 py-0">
                        <nav class="nav py-1">
                            <form class="form-inline">
                                <button type="button" class="btn btn-link btn-sm d-inline align-middle" data-toggle="modal" data-target="#laborsSelectionModal-@nirStage.ID">
                                    Добавить трудозатраты
                                </button>
                            </form>
                        </nav>
                        <div id="nirStageData_@nirStage.ID">
                            @{
                                await Html.RenderPartialAsync(
                                    "../LaborVolumeRegs/_RegistredVolumesTable",
                                    nirStage
                                    );
                            }
                        </div>
                    </div>
                </div>
            </div>

            <table class="table" hidden>
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Labor.Code)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Labor)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].Volume)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.RegistredLabors[0].TotalVolume)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.RegistredLabors)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Date)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Labor.Code)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Labor.Name)
                            </td>
                            <td>
                                <div data-id="@item.ID">Удалить</div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div> <!-- card-->
    }
</div>

<!-- Modals -->
@foreach (var nirStage in Model.NirStagesVM)
{
    <div class="modal fade" id="laborsSelectionModal-@nirStage.ID" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Работы НИР</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body container" id="laborSelectionList-@nirStage.ID">
                    @{ var attachedLabors = nirStage.AttachedLaborVolumes.Select(m => (NirLabor)m.Labor); }

                    @foreach (var labor in Model.NirLabors)
                    {
                        bool isHidden = attachedLabors.Contains(labor);

                        <div class="row justify-content-start" data-laborID="@labor.ID" hidden="@isHidden")>
                            <div class="col-1 pr-0">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="labor-@nirStage.ID-@labor.ID" />
                                    <label class="custom-control-label" for="labor-@nirStage.ID-@labor.ID" name ="labor-Code">@labor.Code</label>
                                </div>
                            </div>
                            <label class="col-9 pl-0" for="labor-@nirStage.ID-@labor.ID" name="labor-Name">@labor.Name</label>
                            <div class="col-1 px-0" name="labor-MinVolume">
                                @labor.MinVolume.ToString("0.0####", CultureInfo.InvariantCulture)
                            </div>
                            <div class="col-1 px-0" name ="labor-MaxVolume">
                                @labor.MaxVolume.ToString("0.0####", CultureInfo.InvariantCulture)
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                    <button type="button" class="btn btn-primary nirStageModalBtnOK" data-nirStageID="@nirStage.ID">ОК</button>
                </div>
            </div>
        </div>
    </div>
}

@section scripts{
    <script>
        class Labor {
            id = 0;
            code = "";
            name = "";
            minVolume = 0.0;
            maxVolume = 0.0;

            constructor(id = 0, code = "", name = "", minVolume = 0.0, maxVolume = 0.0) {
                this.id = id;
                this.code = code;
                this.name = name;
                this.minVolume = minVolume;
                this.maxVolume = maxVolume;
            }
        }

        class Helper {
            constructor() { }

            createLabor(row) {
                return new Labor(
                    parseInt(row.attr('data-laborID')),
                    row.find("[name='labor-Code']").first().text().trim(),
                    row.find("[name='labor-Name']").first().text().trim(),
                    parseFloat(row.find("[name='labor-MinVolume']").first().text().trim()),
                    parseFloat(row.find("[name='labor-MaxVolume']").first().text().trim()),
                );
            }

            forEachCheckedRow(selectList, func) {
                let checkedItems = selectList.find("input:checked");
                selectList.has(checkedItems).each(func);
            }

            addLaborsToNirStageTable(laborsArray, nirStageID) {
                let self = this;
                let nirInnovationRate = parseFloat($('#nirInnovationRateValue').text().trim());
                let table = $('#LaborVolumesForNirStage-' + nirStageID);
                laborsArray.forEach(function (labor, index, array) {
                    let row = self.createNirStageLaborsTableRecord(nirStageID, labor, labor.minVolume, labor.minVolume * nirInnovationRate);
                    table.append(row);
                });
            };

            createNirStageLaborsTableRecord(nirStageID, labor, volume, totalVolume) {
                let row = $('#nirStageTableRowHolder').find('tr').first().clone(true, true);
                row.attr('data-laborID', labor.id);
                row.children("[name='laborCode']").first().text(labor.code);
                row.children("[name='laborName']").first().text(labor.name);
                row.children("[name='laborMinVolume']").first().text(labor.minVolume);
                row.children("[name='laborMaxVolume']").first().text(labor.maxVolume);
                row.find("[name='Volume']").first().val(volume);
                row.children("[name='totalVolume']").first().text(totalVolume);

                let removeButton = row.find('.removeLaborButton').first();
                removeButton.on('click', self.onRemoveLabor_buttonHandler);
                removeButton.attr({ 'data-laborID': labor.id, 'data-nirStageID': nirStageID });
                return row;
            }

            recalcNirStageTotalLaborsVolume(nirStageID) {
                let nirStageTotalVolume = 0;
                let volumes = $(`#LaborVolumesForNirStage-${nirStageID} [name="totalVolume"]`);

                volumes.each(function (index, element) {
                    nirStageTotalVolume += parseFloat($(element).text().trim());
                });

                $(`#nirStageLaborsVolumeTotal-${nirStageID}`).text(nirStageTotalVolume);
            }

            recalcNirTotalLaborsVolume() {
                let totalVolume = 0;
                $("[id^='nirStageLaborsVolumeTotal']").each(function (index, element) {
                    totalVolume += parseFloat($(element).text());
                });

                $('#nir-labor-volumes-total').text(totalVolume);
            }

            closeLaborSelectionModal(nirStageID) {
                $('#laborsSelectionModal-' + nirStageID).modal("hide");
            }

            onRemoveLabor_buttonHandler(event) {
                let deleteButton = $(event.target);
                let nirStageID = deleteButton.attr('data-nirStageID');
                let laborID = deleteButton.attr('data-laborID');
                $(`#LaborVolumesForNirStage-${nirStageID} tr`).has(deleteButton).remove();
                $(`#laborSelectionList-${nirStageID} .row[data-laborID="${laborID}"]`).attr('hidden', false);

                self = new Helper();
                self.recalcNirStageTotalLaborsVolume(nirStageID);
                self.recalcNirTotalLaborsVolume();
            }

            loadNirLabors() {
                let self = this;

                $('.LaborVolumesForNirStage').each(function (index, element) {
                    let nirStageSection = $(element);
                    let nirID = $('#Nir_ID').val();
                    let nirStageID = nirStageSection.attr('data-nirStageID');

                    $.get(`/api/laborVolumeReg?niokrID=${nirID}&niokrStageID=${nirStageID}`).done(function (laborVolumeRegs) {
                        $.each(laborVolumeRegs, function (i, regRecord) {
                            let row = self.createNirStageLaborsTableRecord(nirStageID, regRecord.labor, regRecord.volume, regRecord.totalVolume)
                            nirStageSection.append(row);
                        });
                    });
                });

            }
        }

        $(document).ready(function () {
            let helper = new Helper();

            helper.loadNirLabors();


            $('.nirStageModalBtnOK').on('click', function (event) {
                let okButton = $(event.target);
                let nirStageID = okButton.attr('data-nirStageID');
                let checkedRows = $("#laborSelectionList-" + nirStageID + " .row");
                let selectedLabors = [];
                helper.forEachCheckedRow(checkedRows, function (index, row) {
                    selectedLabors.push(helper.createLabor($(row)));
                    $(row).attr("hidden", true);
                    $(row).find("input:checkbox").prop("checked", false);
                });

                helper.addLaborsToNirStageTable(selectedLabors, nirStageID);
                helper.recalcNirStageTotalLaborsVolume(nirStageID);
                helper.recalcNirTotalLaborsVolume();
                helper.closeLaborSelectionModal(nirStageID);
            });

            $("[name='nirStageCard']").each(function (index, nirCardElement) {
                let nirCard = $(nirCardElement);
                let nirStageID = nirCard.attr("data-nirStageID");
                helper.recalcNirStageTotalLaborsVolume(nirStageID);
                helper.recalcNirTotalLaborsVolume();
            });

            $('.removeLaborButton').on('click', helper.onRemoveLabor_buttonHandler);
        });
    </script>
}